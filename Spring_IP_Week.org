#+TITLE: Innovation week : Spring framework
#+AUTHOR: Jonathan Fairbanks

unorganized notes taken as I go.

* PluralSight
** Java Spring
https://app.pluralsight.com/library/courses/spring-framework-spring-fundamentals/table-of-contents
*** What is Spring
**** Dependency Injection framework
*** Spring configuration using Java
**** @Beans
decorator over methods

by default they are singletons meaning it will only be called once
**** Setter injection
**** Constructor injection
basically the same as setter except it's as constructor instead of a setter
*** Scopes
**** Singleton
***** default bean scope
***** One instantiation
***** Single instance per Spring container
***** Added with @Scope over method
**** Prototype
bean per request
***** Per request
***** Garunteed Uniq
***** Added with @Prototype overmethod
**** Web aware
***** Request
***** Session
***** Global
*** Autowired
Makes things a lot easier since you do not have to call any of the set/constructor injection for services, as long as everything has the appropriate decorators above them
**** @ComponentScan({""}) <- look for inside quote
*** Stereotypes
**** @Component
**** @Repository
**** @Service
**** @Controller
*** Advanced Bean Configuration
****  Bean Lifecycle
instantiation -> populate properties -> BeanNameAware -> BeanFactoryAware -> Pre initialization - BeanPostProcessors -> InitialaizeBean -> InitMethod -> Post init - BeanPostProcessors
**** FactoryBean
***** What?
**** SpEL (Spring Expression Language)
***** Manipualte object Graph
***** Evaluate at runtime
***** Security
@Value("#{}") can be done run time which will be injected into code.
**** Proxies
***** @Transactional
**** Profiles
***** Adapt Environments
***** Runtime Configuration
***** @Profile("")
***** Add into vm option
-Dspring.profiles.active=profileName
** Java Spring JPA
*** Spring JPA
**** Enhances JPA
**** Simplifies Data Tier
**** JpaRepository
**** Query DSL
**** Data Tier
*** JPA (Java Persistence API)
an object relation mapping - Relational tables <-> Software objects.
[Honestly sounds a lot like entity framework from .NET]
*** JPA Repository
A repository in the repositories folder that is an interface that extends from JPARepository. and that is it.
**** Spring repositories themselves do not need to be an interface
**** DAO (Data Acess Object)
*** Architecure
#+attr_html: width=100px
[[./Resources/RepoArchitecture.png][Repository Architecture]]
*** Decorators
**** @ID
Pretty much the primary key of the data when represnted in tables on a DB
***** GenerationType.
https://stackoverflow.com/questions/47676403/spring-generatedvalue-annotation-usage
good stack overflow describing usage of each term
****** Auto
default and picks based on provider i.e hibernation -> sequence
****** Identity
uses DBs auto increment not good for hibernate since hibernate requires a primary key value for each entity.
****** Sequence
uses db unique but requires an additional select (almost no performance impact for most applications?)
****** Table
simulated sequence
***** Database relationships
You can specify where a part of an entity relates to another with JPA by adding decorators such as @ManyToOne @ManyToMany as such over parts of an object
*** Seperation of Concerns
**** Presentation Layer
**** Business Logic
**** Data Layer
*** Components
**** Controller
handles request, no business logic
coordinated with wservice and repository
***** @Controller
**** Service
business logic belongs here
transactional
often same methods as the repository. So things such as if the result from a repository is empty do X
described as the verbs of a system
***** @Service

**** Repository
Data Access Object usually 1:1 to table, described as the "nouns" of the system
***** @Repository
*** Entity tagging
**** @Entity
marks it as something that is tied into a database
**** @Id
marks what field is the primary key
**** @GeneratedValue
what type of primary key
*** Database Creation Values
spring.jpa.hibernate.ddl-auto=
**** Create
**** Update
**** Create-drop
**** Validate
**** None
*** Application properties
**** Forced uppercase tables
spring.jpa.hibernate.naming.physical-strategy=

org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

*** JPA Annotations
**** @Entity - Declares Object
**** @Table - Table specifics
**** @Id - Primary key
**** @GeneratedValue - Used with @Id
***** IDENTITY - Column
***** AUTO - Chooses from dialect
***** SEQUENCE - if database supports it
***** TABLE - uses identity table
**** @PresistenceContext - injects EntityManager
**** @Service - Location of business logic
**** @Repository - Database Integration
**** Transactional - Begining of Transaction
*** Default columns
@Column
**** insertable
**** length
**** name
**** nullable
**** precision
**** scale
**** table
**** unique
**** updatable
*** Join Types
**** @OneToOne
**** @OneToMany
**** @ManyToOne
**** @ManyToMany
*** FetchTypes
**** Lazy
**** Eager
*** JPQL
centered around objects
ex:

Query q = em.createQuery("Select r from Registration");

where r is an object
*** NamedQueries
Cleaner but not required.
@NamedQueries({
    @NamedQuery(x=, y=)
})

** Other notes
*** Keybinds
**** Ctrl + Shift + O
removes unused imports
*** PluralSight
**** Leaving the RequestMapping blank?
*** Why is it called @Lob
-> stores binary data
*** Acronym purgatory
**** JPA - Java Persistence API
**** EJB - Enterpise Java Bean
**** JNDI - Java Naming and Directory Interface
**** JEE - Java Enterpise Edition
**** POJO - Plain Old Java Object
**** AOP - Aspect oriented programming
**** ORM - Object Relational Mapping
**** Java Server Pages
*** Best practices
**** Singleton
**** Factories
**** Abstract Factories
**** Template Method
**** Annotation Based

* Spring.io Docs
** Framework Reference
https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/overview.html
*** Modules
**** Core container
contains core, beans, context, and expression language modules
***** Core & Beans
seperates configuration from dependecies
***** Beans
3 things
****** Serializable
****** something
****** something
***** Context
access objects similar to (JNDI registry)
****** JNDI Registry
https://docs.oracle.com/javase/tutorial/jndi/overview/index.html
Java Naming and Direcotry interface

it is an API that provides naming and directory functionality
[[./Resources/JNDI.png]]
** The IoC Container
https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html
(IoC) Inversion of Control which describes the process of a container injecting dependecies when creating beans
*** Factory Method
a design pattern that describes making objects at run time. (where all objects share the superclass)
* TutorialsPoint
* MasterControl
** Getter and Setter tags used on some entities
** SLf4j
**** Stands for Simple Logging Facade for Java
very easy to remember
** Table with schema parameter used a fair bit
