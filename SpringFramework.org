#+TITLE: Innovation week : Spring Framework Summary
#+AUTHOR: Jonathan Fairbanks
#+STARTUP: inlineimages


* Spring Framework
** Spring overview
Spring is a IoC (Inversion of Control) framework which is a design pattern that has the intention of removing dependencies from your code.

Examples often showing between an object being isntantiated via setter or a constructor .
** AOP (Aspect Oriented Programming)
Spring is also what is called a Aspect oriented framework which means it seperates things out in a way. (described as cross cutting concerns) an example is having something like logging being part of the application running and the "business" logic written somewhere else.
** Beans
Beans are objects that are managed by Spring
* JPA (Java Persistence API)
** Defining Entities (Models)
Entities are persistent domain objects that usually represent a table in a database. and each instance of an entity corresponds with a row.
*** Decorators
**** @Entity
Decorator that is placed over a class definition. which marks the object as a JPA Entity
**** @Id
The decorator that lets JPA know which of the objects ID is is its ID (Usually a Long or some other number)
**** @GeneratedValue [1]
This is paired with the @Id decorator and lets JPA know how the ID should be generated. ex: @GeneratedValue(strategy=GenerationType.AUTO)

if this decorator is ommited it will selected AUTO as its generation type

***** AUTO
The default generation type and will be based on the persistence provider.
***** IDENTITY
Relies on an auto incremented database column and generates a new value for each insert operation. Not a good option for hibernate as it requires the insert immedietly reducing performance.
***** SEQUENCE
uses a database sequence to generate unique values, but requires an additonal select statement when doing so. via use of the @SequenceGenerator(x="",y="") or if that is ommitted it will request the next value from the default sequence.
***** TABLE
simulates sequence by using by using transactional locks which will reduce performance, use SEQUENCE if DB supports it
**** @SequenceGenerator
you can optionally specifiy additional arguments to
**** @Column
good practice to specify the name of a column in a table, can also specify the properties of a column

| Identifier       | Data Type | Default |
|------------------+-----------+---------|
| name             | String    | ""      |
| insertable       | Boolean   | true    |
| length           | int       | 255     |
| precision        | int       | 0       |
| scale            | int       | 0       |
| nullable         | Boolean   | true    |
| columnDefinition | String    | ""      |
| unique           | Boolean   | false   |
| updatable        | Boolean   | true    |


***** name : just the name of the column
***** insertable : whether SQL insert statements can be used
***** length : column length
***** precision : decimal precision
***** scale : scale for a decimal column
***** nullable : Defines if it is nullable
***** columnDefinition : change definition ex: varChar(256)
***** unique : if it has a uniqueness constraint
***** updatable : if SQL update statements can be used on it

*** Entity Requirements [2]
**** Declared with @Entity
**** has a public/protected no args constructor
**** Class, methods, and variables must not be declared Final
**** Persistence variables must be private/protected and can only be modified by the entities methods
**** Entities can extend or be extended by non entity classes
**** If an entity is passed by value as a detached object the class needs to implement serializable

*** Example from https://spring.io/guides/gs/accessing-data-jpa/#initial:
#+begin_java options
package com.example.accessingdatajpa;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Customer {

  @Id
  @GeneratedValue(strategy=GenerationType.AUTO)
  private Long id;
  private String firstName;
  private String lastName;

  protected Customer() {}

  public Customer(String firstName, String lastName) {
    this.firstName = firstName;
    this.lastName = lastName;
  }

  @Override
  public String toString() {
    return String.format(
        "Customer[id=%d, firstName='%s', lastName='%s']",
        id, firstName, lastName);
  }

  public Long getId() {
    return id;
  }

  public String getFirstName() {
    return firstName;
  }

  public String getLastName() {
    return lastName;
  }
}

#+end_java

** Join Types
** Creating Queries
the repository implementations are created automatically from an interface
the interface incldues methods for saving, deleting and finding customer entities.

with this this implementation of it does not need to be written after you write the interface.

*** Example from https://spring.io/guides/gs/accessing-data-jpa/#initial:
#+begin_java options
package com.example.accessingdatajpa;

import java.util.List;
import org.springframework.data.repository.CrudRepository;

public interface CustomerRepository extends CrudRepository<Customer, Long> {

  List<Customer> findByLastName(String lastName);

  Customer findById(long id);
}

#+end_java
* DSL Query

* MasterControl

* Docs
** https://docs.spring.io/spring-framework/docs/current/reference/html/
** https://www.tutorialspoint.com/spring/spring_overview.htm
* Good Stack overflow pages
** [1] https://stackoverflow.com/questions/47676403/spring-generatedvalue-annotation-usage
** [2] https://stackoverflow.com/questions/63414381/what-is-entity-in-spring-jpa
** [3] https://stackoverflow.com/questions/3058/what-is-inversion-of-control
